//PLAY WITH THIS -- THE ADJACENCY TABLE
var graph = [
    [0,2,9,6,5,7,5,9,8,0,5,5,0,0,6,6,8,3,1,3],
    [2,0,3,0,2,1,0,0,1,3,6,2,6,9,4,9,6,0,8,3],
    [9,3,0,9,9,4,1,2,5,5,5,4,6,5,1,8,8,7,5,3],
    [6,0,9,0,7,7,7,8,4,4,2,2,8,4,4,5,5,1,7,1],
    [5,2,9,7,0,4,5,5,1,9,9,1,5,5,5,5,2,1,9,7],
    [7,1,4,7,4,0,7,8,7,9,8,0,1,2,9,3,5,1,1,3],
    [5,0,1,7,5,7,0,6,0,6,9,4,2,6,1,3,4,5,3,4],
    [9,0,2,8,5,8,6,0,1,4,9,0,0,5,9,0,9,0,4,3],
    [8,1,5,4,1,7,0,1,0,4,9,1,4,9,9,9,7,9,0,1],
    [0,3,5,4,9,9,6,4,4,0,8,4,0,8,5,4,1,3,8,9],
    [5,6,5,2,9,8,9,9,9,8,0,4,8,9,3,1,9,0,3,8],
    [5,2,4,2,1,0,4,0,1,4,4,0,1,7,2,1,9,5,1,0],
    [0,6,6,8,5,1,2,0,4,0,8,1,0,5,2,2,4,0,0,9],
    [0,9,5,4,5,2,6,5,9,8,9,7,5,0,9,4,2,1,8,6],
    [6,4,1,4,5,9,1,9,9,5,3,2,2,9,0,9,3,0,4,0],
    [6,9,8,5,5,3,3,0,9,4,1,1,2,4,9,0,8,8,5,6],
    [8,6,8,5,2,5,4,9,7,1,9,9,4,2,3,8,0,9,4,6],
    [3,0,7,1,1,1,5,0,9,3,0,5,0,1,0,8,9,0,2,6],
    [1,8,5,7,9,1,3,4,0,8,3,1,0,8,4,5,4,2,0,8],
    [3,3,3,1,7,3,4,3,1,9,8,0,9,6,0,6,6,6,8,0]
    ];

//THIS WILL BE UPDATED IN THE PROGRAM LATER TO MATCH graph. 
//YOU CAN EDIT THE VALUES IF YOU WISH, WON'T MAKE A DIFFERENCE.
//JUST DON'T CHANGE ITS DIMENSION.
var graphorig = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ];

//NO PLAYING WITH THESE
var tree = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ];

var treefull = [
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
    ];

var twicetreelength = 0;
var temparray = [];
var edgetoadd = [];
var smallestnum;
var loopexists;
var allconnected;
var allreallyconnected = 0;


/*TO GENERATE GRAPH FROM FUNCTION (EXAMPLE)
for(var v = 0; v < 20; v++){
    for(var w = 0; w < 20; j++){
        if(v!==w){graph[v][w] = v + w;}
        if(v===w){graph[v][w] = 0;}
    }    
}*/ 

for(var x = 0; x < 20; x++){
    for(var y = 0; y < 20; y++){
        graphorig[x][y] = graph[x][y];
    }
}

while(allreallyconnected === 0){
    smallestnum = 99999;
    allconnected = 1;
    loopexists = 0;
    for (var i = 0; i < 20; i++){
        for (var j = 0; j < 20; j++){
            if(graph[i][j] < smallestnum){
                smallestnum = graph[i][j];
                edgetoadd = [i, j];
            }
        }
    }
    for(var k = 0; k < 20; k++){
        if(treefull[edgetoadd[0]][edgetoadd[1]] > 0){loopexists = 1;}
    }
    if(loopexists === 0){
        tree[edgetoadd[0]][edgetoadd[1]] = 1;
        tree[edgetoadd[1]][edgetoadd[0]] = 1;
        for(var s = 0; s < 20; s++){
            temparray[s] = treefull[edgetoadd[0]][s] + treefull[edgetoadd[1]][s];
        }
        for(var t = 0; t < 20; t++){
            treefull[edgetoadd[0]][t] = temparray[t];
            treefull[edgetoadd[1]][t] = temparray[t];
            treefull[t][edgetoadd[0]] = temparray[t];
            treefull[t][edgetoadd[1]] = temparray[t];
        }
    }
    graph[edgetoadd[0]][edgetoadd[1]] = 99999;
    for (var m = 0; m < 20; m++){
        for (var n = 0; n < 20; n++){
            allconnected = allconnected*treefull[m][n];
        }
    }
    if(allconnected !== 0){
        allreallyconnected = 1;
    }
}

for (var a = 0; a < 20; a++){
    for (var b = 0; b < 20; b++){
        twicetreelength = twicetreelength + (tree[a][b])*(graphorig[a][b]);
    }
}

fill(0, 0, 0);
println(tree);
text("Tree length:" + twicetreelength/2, width/2 - 35, height/2 - 7);